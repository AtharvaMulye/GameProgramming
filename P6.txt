using System;
using System.Drawing;
using System.Windows.Forms;
using Microsoft.DirectX;
using Microsoft.DirectX.Direct3D;

namespace P6_GP
{
    public partial class Form1 : Form
    {
        private Device device;
        private float angle = 0f;

        public Form1()
        {
            InitializeComponent();
            InitializeDevice();
            SetStyle(ControlStyles.AllPaintingInWmPaint | ControlStyles.Opaque, true);
        }

        private void InitializeDevice()
        {
            PresentParameters pp = new PresentParameters();
            pp.Windowed = true;
            pp.SwapEffect = SwapEffect.Discard;

            device = new Device(0, DeviceType.Hardware, this, CreateFlags.SoftwareVertexProcessing, pp);
            device.RenderState.CullMode = Cull.None;
            device.RenderState.Lighting = true;

            device.Lights[0].Type = LightType.Spot;
            device.Lights[0].Range = 4;
            device.Lights[0].Position = new Vector3(0, -1, 0);
            device.Lights[0].Enabled = true;
        }

        private void Render()
        {
            device.Transform.Projection = Matrix.PerspectiveFovLH((float)Math.PI / 4, Width / (float)Height, 1f, 100f);
            device.Transform.View = Matrix.LookAtLH(new Vector3(0, 0, 30), new Vector3(0, 0, 0), new Vector3(0, 1, 0));

            CustomVertex.PositionNormalColored[] vertices = new CustomVertex.PositionNormalColored[3];
            vertices[0].Position = new Vector3(10f, 12f, 0f);
            vertices[0].Normal = new Vector3(0, 0, -1); // Pointing inward
            vertices[0].Color = Color.Yellow.ToArgb();

            vertices[1].Position = new Vector3(-5f, 5f, 0f);
            vertices[1].Normal = new Vector3(0, 0, -1);
            vertices[1].Color = Color.Blue.ToArgb();

            vertices[2].Position = new Vector3(5f, 5f, -1f);
            vertices[2].Normal = new Vector3(0, 0, -1);
            vertices[2].Color = Color.Pink.ToArgb();

            device.Clear(ClearFlags.Target, Color.Cyan, 1.0f, 0);
            device.BeginScene();
            device.VertexFormat = CustomVertex.PositionNormalColored.Format;

            device.Transform.World = Matrix.Identity; // No translation or rotation

            device.DrawUserPrimitives(PrimitiveType.TriangleList, 1, vertices);

            device.EndScene();
            device.Present();
            Invalidate();
        }
        private void Form1_Load(object sender, EventArgs e) { }
        private void Form1_Paint(object sender, PaintEventArgs e)
        {
            Render();
        }
    }
}